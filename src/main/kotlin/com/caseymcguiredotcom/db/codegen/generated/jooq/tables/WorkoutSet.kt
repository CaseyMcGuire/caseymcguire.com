/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.keys.WORKOUT_SET_PKEY
import generated.jooq.keys.WORKOUT_SET__FK_EXERCISE
import generated.jooq.keys.WORKOUT_SET__FK_WORKOUT
import generated.jooq.tables.Exercise.ExercisePath
import generated.jooq.tables.Workout.WorkoutPath
import generated.jooq.tables.records.WorkoutSetRecord

import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class WorkoutSet(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, WorkoutSetRecord>?,
    parentPath: InverseForeignKey<out Record, WorkoutSetRecord>?,
    aliased: Table<WorkoutSetRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<WorkoutSetRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.workout_set</code>
         */
        val WORKOUT_SET: WorkoutSet = WorkoutSet()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<WorkoutSetRecord> = WorkoutSetRecord::class.java

    /**
     * The column <code>public.workout_set.id</code>.
     */
    val ID: TableField<WorkoutSetRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.workout_set.workout_id</code>.
     */
    val WORKOUT_ID: TableField<WorkoutSetRecord, Int?> = createField(DSL.name("workout_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.workout_set.description</code>.
     */
    val DESCRIPTION: TableField<WorkoutSetRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.workout_set.exercise_type</code>.
     */
    val EXERCISE_TYPE: TableField<WorkoutSetRecord, String?> = createField(DSL.name("exercise_type"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.workout_set.num_reps</code>.
     */
    val NUM_REPS: TableField<WorkoutSetRecord, Int?> = createField(DSL.name("num_reps"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.workout_set.weight</code>.
     */
    val WEIGHT: TableField<WorkoutSetRecord, Int?> = createField(DSL.name("weight"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.workout_set.unit_of_mass</code>.
     */
    val UNIT_OF_MASS: TableField<WorkoutSetRecord, String?> = createField(DSL.name("unit_of_mass"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.workout_set.created_at</code>.
     */
    val CREATED_AT: TableField<WorkoutSetRecord, LocalDateTime?> = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.workout_set.updated_at</code>.
     */
    val UPDATED_AT: TableField<WorkoutSetRecord, LocalDateTime?> = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.workout_set.exercise_id</code>.
     */
    val EXERCISE_ID: TableField<WorkoutSetRecord, Int?> = createField(DSL.name("exercise_id"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<WorkoutSetRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<WorkoutSetRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<WorkoutSetRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.workout_set</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.workout_set</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.workout_set</code> table reference
     */
    constructor(): this(DSL.name("workout_set"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, WorkoutSetRecord>?, parentPath: InverseForeignKey<out Record, WorkoutSetRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, WORKOUT_SET, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class WorkoutSetPath : WorkoutSet, Path<WorkoutSetRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, WorkoutSetRecord>?, parentPath: InverseForeignKey<out Record, WorkoutSetRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<WorkoutSetRecord>): super(alias, aliased)
        override fun `as`(alias: String): WorkoutSetPath = WorkoutSetPath(DSL.name(alias), this)
        override fun `as`(alias: Name): WorkoutSetPath = WorkoutSetPath(alias, this)
        override fun `as`(alias: Table<*>): WorkoutSetPath = WorkoutSetPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<WorkoutSetRecord, Int?> = super.getIdentity() as Identity<WorkoutSetRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<WorkoutSetRecord> = WORKOUT_SET_PKEY
    override fun getReferences(): List<ForeignKey<WorkoutSetRecord, *>> = listOf(WORKOUT_SET__FK_EXERCISE, WORKOUT_SET__FK_WORKOUT)

    private lateinit var _exercise: ExercisePath

    /**
     * Get the implicit join path to the <code>public.exercise</code> table.
     */
    fun exercise(): ExercisePath {
        if (!this::_exercise.isInitialized)
            _exercise = ExercisePath(this, WORKOUT_SET__FK_EXERCISE, null)

        return _exercise;
    }

    val exercise: ExercisePath
        get(): ExercisePath = exercise()

    private lateinit var _workout: WorkoutPath

    /**
     * Get the implicit join path to the <code>public.workout</code> table.
     */
    fun workout(): WorkoutPath {
        if (!this::_workout.isInitialized)
            _workout = WorkoutPath(this, WORKOUT_SET__FK_WORKOUT, null)

        return _workout;
    }

    val workout: WorkoutPath
        get(): WorkoutPath = workout()
    override fun `as`(alias: String): WorkoutSet = WorkoutSet(DSL.name(alias), this)
    override fun `as`(alias: Name): WorkoutSet = WorkoutSet(alias, this)
    override fun `as`(alias: Table<*>): WorkoutSet = WorkoutSet(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): WorkoutSet = WorkoutSet(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): WorkoutSet = WorkoutSet(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): WorkoutSet = WorkoutSet(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): WorkoutSet = WorkoutSet(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): WorkoutSet = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): WorkoutSet = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): WorkoutSet = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): WorkoutSet = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): WorkoutSet = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): WorkoutSet = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): WorkoutSet = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): WorkoutSet = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): WorkoutSet = where(DSL.notExists(select))
}
