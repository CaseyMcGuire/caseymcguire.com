/*
 * This file is generated by jOOQ.
 */
package com.caseymcguiredotcom.db.generated.jooq.tables


import com.caseymcguiredotcom.db.generated.jooq.Public
import com.caseymcguiredotcom.db.generated.jooq.keys.USER_ROLES_PKEY
import com.caseymcguiredotcom.db.generated.jooq.keys.USER_ROLES__FK_USER_ID
import com.caseymcguiredotcom.db.generated.jooq.tables.records.UserRolesRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class UserRoles(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRolesRecord>?,
    aliased: Table<UserRolesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRolesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.user_roles</code>
         */
        val USER_ROLES = UserRoles()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRolesRecord> = UserRolesRecord::class.java

    /**
     * The column <code>public.user_roles.user_role_id</code>.
     */
    val USER_ROLE_ID: TableField<UserRolesRecord, Int?> = createField(DSL.name("user_role_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.user_roles.user_id</code>.
     */
    val USER_ID: TableField<UserRolesRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.user_roles.role</code>.
     */
    val ROLE: TableField<UserRolesRecord, String?> = createField(DSL.name("role"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserRolesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRolesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.user_roles</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.user_roles</code> table reference
     */
    constructor(): this(DSL.name("user_roles"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRolesRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ROLES, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<UserRolesRecord, Int?> = super.getIdentity() as Identity<UserRolesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UserRolesRecord> = USER_ROLES_PKEY
    override fun getKeys(): List<UniqueKey<UserRolesRecord>> = listOf(USER_ROLES_PKEY)
    override fun getReferences(): List<ForeignKey<UserRolesRecord, *>> = listOf(USER_ROLES__FK_USER_ID)
    fun users(): Users = Users(this, USER_ROLES__FK_USER_ID)
    override fun `as`(alias: String): UserRoles = UserRoles(DSL.name(alias), this)
    override fun `as`(alias: Name): UserRoles = UserRoles(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserRoles = UserRoles(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserRoles = UserRoles(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, String?> = super.fieldsRow() as Row3<Int?, Int?, String?>
}
