/*
 * This file is generated by jOOQ.
 */
package com.caseymcguiredotcom.db.generated.jooq.tables.records


import com.caseymcguiredotcom.db.generated.jooq.tables.UserRoles

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class UserRolesRecord() : UpdatableRecordImpl<UserRolesRecord>(UserRoles.USER_ROLES), Record3<Int?, Int?, String?> {

    var userRoleId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var userId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var role: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, Int?, String?> = super.fieldsRow() as Row3<Int?, Int?, String?>
    override fun valuesRow(): Row3<Int?, Int?, String?> = super.valuesRow() as Row3<Int?, Int?, String?>
    override fun field1(): Field<Int?> = UserRoles.USER_ROLES.USER_ROLE_ID
    override fun field2(): Field<Int?> = UserRoles.USER_ROLES.USER_ID
    override fun field3(): Field<String?> = UserRoles.USER_ROLES.ROLE
    override fun component1(): Int? = userRoleId
    override fun component2(): Int? = userId
    override fun component3(): String? = role
    override fun value1(): Int? = userRoleId
    override fun value2(): Int? = userId
    override fun value3(): String? = role

    override fun value1(value: Int?): UserRolesRecord {
        this.userRoleId = value
        return this
    }

    override fun value2(value: Int?): UserRolesRecord {
        this.userId = value
        return this
    }

    override fun value3(value: String?): UserRolesRecord {
        this.role = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?): UserRolesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised UserRolesRecord
     */
    constructor(userRoleId: Int? = null, userId: Int? = null, role: String? = null): this() {
        this.userRoleId = userRoleId
        this.userId = userId
        this.role = role
    }
}
