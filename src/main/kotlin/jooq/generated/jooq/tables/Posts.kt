/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.keys.POSTS_PKEY
import generated.jooq.keys.POSTS__FK_ID
import generated.jooq.tables.records.PostsRecord

import javax.annotation.Generated

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.14.1"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
class Posts(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PostsRecord>?,
    aliased: Table<PostsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PostsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.posts</code>
         */
        val POSTS = Posts()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PostsRecord> = PostsRecord::class.java

    /**
     * The column <code>public.posts.id</code>.
     */
    val ID: TableField<PostsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.posts.user_id</code>.
     */
    val USER_ID: TableField<PostsRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.posts.title</code>.
     */
    val TITLE: TableField<PostsRecord, String?> = createField(DSL.name("title"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.posts.contents</code>.
     */
    val CONTENTS: TableField<PostsRecord, String?> = createField(DSL.name("contents"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<PostsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PostsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.posts</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.posts</code> table reference
     */
    constructor(): this(DSL.name("posts"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PostsRecord>): this(Internal.createPathAlias(child, key), child, key, POSTS, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<PostsRecord, Int?> = super.getIdentity() as Identity<PostsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PostsRecord> = POSTS_PKEY
    override fun getKeys(): List<UniqueKey<PostsRecord>> = listOf(POSTS_PKEY)
    override fun getReferences(): List<ForeignKey<PostsRecord, *>> = listOf(POSTS__FK_ID)
    fun users(): Users = Users(this, POSTS__FK_ID)
    override fun `as`(alias: String): Posts = Posts(DSL.name(alias), this)
    override fun `as`(alias: Name): Posts = Posts(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Posts = Posts(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Posts = Posts(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, Int?, String?, String?> = super.fieldsRow() as Row4<Int?, Int?, String?, String?>
}
